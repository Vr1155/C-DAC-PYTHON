Session-1:

    Table of contents:
        1. Installing Python
        2. Introduction to Python
        3. Basic Syntax
        4. Variables
        5. Data Types
        6. Operators
        7. Input/Output
        8. Flow of Control (Modules, Branching)
        9. If, If-else, Nested if-else
        10. Looping-For, While, Nested loops
        11. Control Structure
        12. Uses of Break & Continue

    day 1, 2, 3:
        basic programming
    day 4, 5, 6:
        pandas, numpy and various other libraries.

=======================================================================

Python was released in 1991 by Guido van Rossum (Dutch Programmer).

Python is used for:
    -> Web Development (Server-side)
    -> Software Development
    -> Mathematics
    -> System Scripting

What can it do?
    -> used on a server to create web applications.
    -> used alongside software to create workflows
    -> connects to database systems. It can also read and modify files
    -> handles big data and perform complex Mathematics
    -> used for rapid prototyping or for production-ready software Development

Why use Python? 
    -> Python runs on an interpreter system, meaning that code,
       can be executed as soon as it is written. 
       This means that prototyping can be very quick.
    -> Python can be treated in 
       a procedural, object-oriented or a functional way. 
    -> Python has simple, concise and minimalist syntax.
    -> Works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)

Python Syntax:

    Python syntax can be executed by writing directly in the Command Line:
    ">>>" represents python shell.
    to print "Hello, World!", simple run this:
    >>>print("Hello, World!")
    Output:
    Hello, World!

    You can create a python file on the server, using the .py file extension,
    and running it in the Command line:
    "C:\Users\Your Name>python myfile.py"

    Python Indentation:
        -> Indentation refers to the spaces at the beginning of a code line.
        -> Where in other programming languages the indentation in code is
           for readability only, the indentation in Python is very important.
        -> Python uses indentation to indicate a block of code.

        Pro tip:
            use this online tool to find non-printable chars in your string:
            https://www.soscisurvey.de/tools/view-chars.ph

        Note:
            right now python 3.12 is the latest version available to install.
            use $python3.12 filename.py

    ======================================================
    for eg:

    if 4 > 2:
        print("Four is greater than two!")
    # notice that we used tab before print statement.

    More eg:

    #Syntax Error:
    if 4 > 2:
    print("Four is greater than two!")

    #correct way:
    if 4 > 2:
        print("Four is greater than two")

    # Syntax Error:
    if 4 > 2:
        print("Four is greater than two")
            print("Four is greater than two")
    # dont make unnecessary indentations

    =================================================
    
    Creating a comment:

    #This is a comment
    print("Hello, World!")

    print("Hello, World!") #This is a comment

    Multiline Comment:

    """
    This is a comment
    written in more than just one line
    """

    print("Hello, World!")

    ==================================================

    Python Variables:

    Variables:
        -> Variables are containers for storing data values.

    Creating Variables:
        -> Python has no command for declaring a Variables
        -> A variable is created the moment you first assign a value to it.
    
    Example:
        x = 5
        y = "Ram"
        print(x)
        print(y)

    Variables do not need to be declared  with any particular type, 
    and can even change type after they have been set.

    Example:
        x = 4 #x is of type int
        x = "Seth" #x is not of type str
        print(x)

    ==================================================

    Casting:

        Casting helps us specify the data type of a variable.

        Example:

            x = str(3) #x will be '3'
            y = int(3) #y will be 3
            z = float(3) #z will be 3.0

    ===================================================

    Get the type:

        You can get the data type of a variable with the type() function.

        Examples:

            x = 5
            y = "Ram"
            print(type(x))
            print(type(y))

            x = "Ram"
            # is the same as
            x = 'Ram'

            # this will create two variables:
            a = 4
            A = "Seth"
            # A will not overwrite A

    ============================================================

    Important Note: Python is case sensitive.

    ============================================================

    Examples:

    # Legal variable names:
    _my_var = "Ram"
    myVar = "Ram"
    MYVAR = "Ram"
    myvar2 = "Ram"
    myvar = "Ram"
    my_var = " Ram"

    =============================================================

    Many values to multiple variables:

        Python allows you to assign values to multiple variables in one line.

        Example:
        x, y, z = "Bat", "Hat", "Car"
        print(x)
        print(y)
        print(z)

    
    One value to multiple variables

        You can assign the some value to multiple variables in one line:
        
        Example:
        x = y = z = "Car"
        print(x)
        print(y)
        print(z)

    =============================================================

    unpack a collection was skipped.

    =============================================================

    Output variables:
        In the print() function, when you try to combine a string 
        and a number with + operator, Python will give you error.

        Examples:

        x = 5
        y = "Ram"
        print(x + y) # Error

        x = 5 
        y = "Ram"
        print(x, y)

        # Create a variable outside a function,
        # and use it inside the function

            Example:

            x = "Friday"

            def myfunc():
                print("Today is" + x)
            
            myfunc()

    ====================================================

    in the lab anaconda navigator is available in cloud
    instructor will give you the path,
    download and install it,
    make sure you have enough space in your system.

    Anaconda navigator is a very heavy software.
    Anaconda is the platform on which you need to run jupyter notebook.
    You will see "Internal server error"
    Instructor says you need "LAN connection"

    Instructor executes all code taught till now inside a jupyter notebook.
    use shortcuts like 
    ctrl + enter = run code in current block
    ctrl + n = new cell
    ctrl + d = delete cell

    Question: 
    Why is there a kernel inside jupyter notebook?


    ====================================================

    some code executed:

        x=5
        y="Hi"
        y2='Hi'
        x="Hello"
        z=str(3)
        a=int(3)
        b=float(3)
        x1,y1,z1="Hi","Hello","Good"
        print(x1)
        print(y1)
        print(y2)
        print(z1)
        x1=y1=z1="Hi"

        print(x1)
        print(y1)
        print(z1)

        """
        print(x)
        print(type(x))
        print(y)
        print(type(z))
        print(type(a))
        print(b)
        """

    ====================================================

    #some more code:

    x="Hi"
    y=5
    #print(x+5) # this will give typeerror
    print(x,5)

    x="Monday"

    def myfunc():
        print("Today is"+x) # not giving indentation will give indent error

    myfunc()


    ====================================================

    Python Data Types:

        Built-in Data Types
            -> In programming, data type is an important concept.
            -> Varaibles can be store data of different types,
               and different types can do different things.

        Python has the following data types built-in by default,
        in these categories:

        Text Type:              str
        Numeric Types:          int, float, complex
        Sequence Types:         list, tuple, range
        Mapping Type:           dict 
        Set Types:              set, frozenset
        Boolean Type:           bool  
        Binary Types:           bytes, bytearray, memoryview
        None Type:              NoneType

    ====================================================

    Operators:

        Example:
            print(10+5)

        Python divides the operators in the following groups:
            -> Arithmetic operators
            -> Logical operators
            -> Bitwise operators
            -> Assignment operators
            -> Identity operators
            -> Comparison operators
            -> Membership operators


            Operators           Name
            +                   Addition
            -                   Subtraction
            *                   Multiplication
            /                   Division
            %                   Modulus
            **                  Exponentiation
            //                  floor division

    Assignment Operators:

    =
    +=
    -=
    *=
    /=
    %=
    //=
    /=
    **=
    &=
    |=
    ^=
    >>=
    <<=

    Comparision operators:

    Operator    Name
    ==          Equal
    !=          Not equal
    >           greater than
    <           less than
    >=          greater than or equal to
    <=          less than or equal to

    Python identity operators
    (Checks if its actually the same object with the same memory location)

    is
    is not


    Python Membership operators:
    (used to check if a sequence is in an object or not)

    in 
    not in

    =============================================================

    User Input:

    python3.6 uses input()
    python2.7 uses raw_input()

    3.6:
    username = input("Enter username")
    print("Username is: "+username)

    Flow of control:
        What is a module?
            Module is almost same as a code library.
            A file containing a set of functions 
            you want to include in your application.
            extension of module file is .py

            Example:

            1.
            # Save this code in a file named myfile.py
            def message(name):
                print("Hello,"+name)

            2.
            # Import the module named myfile
            # and call the message function:
            import myfile
            mymodule.message("All")

            3. 
            File myfile.py
            person1 = {
                "name": "Ram",
                "age": 36,
                "country": "India"
            }

            4. 
            #import the module named myfile,
            #and access the person1 dictionary:
            import myfile
            a=myfile.person1["age"]
            print(a)

            5.
            #create an alias for myfile called mf:
            import myfile as mf
            a = mf.person1["age"]
            print(a)

            6. 
            #Built-in modules:
            import platform
            x=platform.system()
            print(x)

            7.
            def msg(name):
                print("Hello,"+name)

            person1 = {
                "name": "Ram",
                "age": 36,
                "country": "India"
            }

            8. 
            #import only the person1 dictionary from the module:
            from myfile import person1
            print(person1['age'])

            Note: 
            When importing from using the from keyword, 
            do not use the module name when referring to elements in the module. 
            Example person1["age"], not mymodule.person1["age"] 

    ==========================================================

    Q: Write a program to display a three line message.
    Q: WAP to take input from the user student number or id, 
    student name, branch and university. print the details.
    Q: Create a module consisting of two functions,
    area of rectangle and area of square from the main program.
    do the following:
        a.) Calculate area of both.
        b.) Calculate area of square only.
        c.) Calculate area of rectangle only

    ==========================================================

    if-else

        Python supports the usual logical conditions

    indentation:
        python relies on indentation

    elif:
        The elif keyword is python's way of saying "if the previous conditions were 
        not true, then try this condition".

        Example:
            a=20
            b=20
            if b>a:
                print("b is greater than a")
            elif a==b:
                print("b is equal to a")


    else:
        example:
        a=100
        b=20
        if b>a:
            print("b is greater than a")
        elif a==b:
            print("b is equal to a")
        else:
            print("a is greater than b")


    One line if else statement:
     
     a=20
     b=100
     print("A") if a>b else print("B")


     =================================================================

     and keyword:

        The and keyword is a logical operator,
        and is used to combine conditional statements.

        Example:
            #test if a is greater than b, AND if c is greater than a:

            a=100
            b=20
            c=200
            if a>b and c>a:
                print("Both conditions are True")

    =============================================================

    Instructor says that try to write as little lines as possible
    while coding in python.

    Instructor does not like seeing multiline if condition statements
    in exams. So try to make your code as concise as possible.

    =============================================================

    a few logical operators were skipped.

    =============================================================

    The pass statement:
        If statements cannot be empty,
        but if you for some reason have an if statement with no content,
        put in the pass statement to avoid getting an error.

    Example:

        a=20
        b=100
        if b>a:
            pass